{
  "ver": "1.0.25",
  "uuid": "7856eaf7-be2d-471c-bce2-3f1b3aa9005b",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision mediump float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nuniform vec2 resolution;\nfloat rand(vec2 n) {\n  return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n}\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nvec3 ramp(float t) {\n  return t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n}\nvec2 polarMap(vec2 uv, float shift, float inner) {\n    uv = vec2(0.5) - uv;\n    float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n    float py = (sqrt(uv.x * uv.x + uv.y * uv.y) * (1.0 + inner * 2.0) - inner) * 2.0;\n    return vec2(px, py);\n}\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\nfloat shade(vec2 uv, float t) {\n    uv.x += uv.y < .5 ? 23.0 + t * .035 : -11.0 + t * .03;\n    uv.y = abs(uv.y - .5);\n    uv.x *= 35.0;\n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n}\nvec3 color(float grad) {\n    float m2 = .15;\n    grad =sqrt( grad);\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));\n    vec3 color2 = color;\n    color = ramp(grad);\n    color /= (m2 + max(vec3(0), color));\n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float m1 = 2.6;\n    float t = time;\n    vec2 uv = v_uv0*resolution / resolution.y;\n    float ff = 1.0 - uv.y;\n    uv.x -= (resolution.x / resolution.y - 1.0) / 2.0;\n    vec2 uv2 = uv;\n    uv2.y = 1.0 - uv2.y;\n    uv = polarMap(uv, 1.3, m1);\n    uv2 = polarMap(uv2, 1.9, m1);\n    vec3 c1 = color(shade(uv, t)) * ff;\n    vec3 c2 = color(shade(uv2, t)) * (1.0 - ff);\n    fragColor = vec4(c1 + c2, 1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n}"
      },
      "glsl3": {
        "vert": "\nprecision mediump float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform FragConstants {\n  float time;\n};\nuniform Properties {\n  vec2 resolution;\n};\nfloat rand(vec2 n) {\n  return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n}\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nvec3 ramp(float t) {\n  return t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n}\nvec2 polarMap(vec2 uv, float shift, float inner) {\n    uv = vec2(0.5) - uv;\n    float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n    float py = (sqrt(uv.x * uv.x + uv.y * uv.y) * (1.0 + inner * 2.0) - inner) * 2.0;\n    return vec2(px, py);\n}\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\nfloat shade(vec2 uv, float t) {\n    uv.x += uv.y < .5 ? 23.0 + t * .035 : -11.0 + t * .03;\n    uv.y = abs(uv.y - .5);\n    uv.x *= 35.0;\n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n}\nvec3 color(float grad) {\n    float m2 = .15;\n    grad =sqrt( grad);\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));\n    vec3 color2 = color;\n    color = ramp(grad);\n    color /= (m2 + max(vec3(0), color));\n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float m1 = 2.6;\n    float t = time;\n    vec2 uv = v_uv0*resolution / resolution.y;\n    float ff = 1.0 - uv.y;\n    uv.x -= (resolution.x / resolution.y - 1.0) / 2.0;\n    vec2 uv2 = uv;\n    uv2.y = 1.0 - uv2.y;\n    uv = polarMap(uv, 1.3, m1);\n    uv2 = polarMap(uv2, 1.9, m1);\n    vec3 c1 = color(shade(uv, t)) * ff;\n    vec3 c2 = color(shade(uv2, t)) * (1.0 - ff);\n    fragColor = vec4(c1 + c2, 1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n}"
      }
    }
  ],
  "subMetas": {}
}