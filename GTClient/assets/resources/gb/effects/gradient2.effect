
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        time: { value: 0.0 }
        alphaThreshold: { value: 0.5 }
}%

CCProgram vs %{

precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in lowp vec4 a_color;

#if USE_TEXTURE
  in mediump vec2 a_uv0;
  out mediump vec2 v_uv0;
#endif

out lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if CC_USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}%

CCProgram fs %{

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  in mediump vec2 v_uv0;
#endif

#include <alpha-test>
#include <texture>

uniform FragConstants {
  float time;
  float direction;           
};

in lowp vec4 v_color;

void main () {
    vec4 color = vec4(1, 1, 1, 1);

  #if USE_TEXTURE
    CCTexture(texture, v_uv0, color);
  #endif

  color *= v_color;
  ALPHA_TEST(color);

  gl_FragColor = color;

  float temp = v_uv0.x - time;
  if (temp <= 0.0) {
    float temp2 = abs(temp);
    if (temp2 <= 0.2) {
      gl_FragColor.w = 1.0 - temp2/0.2;
    } else {
      gl_FragColor.w = 0.0;
    }
  } else {
    gl_FragColor.w = 1.0;
  }

}

}%
