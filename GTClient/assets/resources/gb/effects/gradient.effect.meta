{
  "ver": "1.0.25",
  "uuid": "bc6f7f8c-7df1-4f12-b4f2-deeb230e34c0",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvarying lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nuniform float direction;\nvarying lowp vec4 v_color;\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  #endif\n  color *= v_color;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n  if(direction == 0.0) {\n    float temp = v_uv0.x - time;\n    if (temp <= 0.0) {\n      float temp2 = abs(temp);\n      if (temp2 <= 0.2) {\n        gl_FragColor.w = temp2/0.2;\n      } else {\n        gl_FragColor.w = 1.0;\n      }\n    } else {\n      gl_FragColor.w = 0.0;\n    }\n  } else {\n    float temp = v_uv0.x - time;\n    if (temp <= 0.0) {\n      float temp2 = abs(temp);\n      if (temp2 <= 0.2) {\n        gl_FragColor.w = 1.0 - temp2/0.2;\n      } else {\n        gl_FragColor.w = 0.0;\n      }\n    } else {\n      gl_FragColor.w = 1.0;\n    }\n  }\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin lowp vec4 a_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nout lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform FragConstants {\n  float time;\n  float direction;\n};\nin lowp vec4 v_color;\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  #endif\n  color *= v_color;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n  if(direction == 0.0) {\n    float temp = v_uv0.x - time;\n    if (temp <= 0.0) {\n      float temp2 = abs(temp);\n      if (temp2 <= 0.2) {\n        gl_FragColor.w = temp2/0.2;\n      } else {\n        gl_FragColor.w = 1.0;\n      }\n    } else {\n      gl_FragColor.w = 0.0;\n    }\n  } else {\n    float temp = v_uv0.x - time;\n    if (temp <= 0.0) {\n      float temp2 = abs(temp);\n      if (temp2 <= 0.2) {\n        gl_FragColor.w = 1.0 - temp2/0.2;\n      } else {\n        gl_FragColor.w = 0.0;\n      }\n    } else {\n      gl_FragColor.w = 1.0;\n    }\n  }\n}"
      }
    }
  ],
  "subMetas": {}
}